import React, { useState, useEffect, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { 
    getAuth, 
    signInAnonymously, 
    signInWithCustomToken 
} from 'firebase/auth';
import { 
    getFirestore, 
    collection, 
    onSnapshot, 
    addDoc, 
    deleteDoc, 
    doc, 
    query, 
    serverTimestamp,
    setLogLevel 
} from 'firebase/firestore';

// --- Global Variable Handling (MANDATORY) ---
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Helper to convert Firebase timestamp (if needed, though client-side date handling is easier)
const formatTimestamp = (timestamp) => {
    if (timestamp && timestamp.toDate) {
        return timestamp.toDate().toLocaleDateString();
    }
    return 'Unknown Date';
};

// --- Main Application Component ---
const App = () => {
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [achievements, setAchievements] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [showModal, setShowModal] = useState(false);
    
    // Form State
    const [title, setTitle] = useState('');
    const [studentName, setStudentName] = useState('');
    const [category, setCategory] = useState('Academic');
    const [description, setDescription] = useState('');

    // Categories for filtering/input
    const categories = ['Academic', 'Sports', 'Arts', 'Leadership', 'Community', 'STEM'];

    // 1. Initialize Firebase and Authenticate User
    useEffect(() => {
        if (firebaseConfig) {
            try {
                // setLogLevel('Debug'); // Enable Firestore logging
                const app = initializeApp(firebaseConfig);
                const firestore = getFirestore(app);
                const authInstance = getAuth(app);
                
                setDb(firestore);
                setAuth(authInstance);

                const authenticate = async () => {
                    if (initialAuthToken) {
                        await signInWithCustomToken(authInstance, initialAuthToken);
                    } else {
                        await signInAnonymously(authInstance);
                    }
                    setUserId(authInstance.currentUser?.uid || crypto.randomUUID());
                    setIsLoading(false);
                };
                authenticate();
            } catch (error) {
                console.error("Firebase Initialization Error:", error);
                setIsLoading(false);
            }
        } else {
            console.error("Firebase configuration is missing.");
            setIsLoading(false);
        }
    }, []);

    // 2. Fetch Achievements in Real-Time (onSnapshot)
    useEffect(() => {
        if (db && userId) {
            // Path: /artifacts/{appId}/public/data/kda_achievements
            const achievementsRef = collection(db, `artifacts/${appId}/public/data/kda_achievements`);
            const q = query(achievementsRef);

            const unsubscribe = onSnapshot(q, (snapshot) => {
                const fetchedAchievements = snapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data(),
                    // Ensure the timestamp is usable if it exists
                    timestamp: doc.data().createdAt
                }));
                // Sort by creation time (newest first)
                fetchedAchievements.sort((a, b) => (b.timestamp?.seconds || 0) - (a.timestamp?.seconds || 0));
                setAchievements(fetchedAchievements);
                setIsLoading(false);
            }, (error) => {
                console.error("Error fetching achievements:", error);
                setIsLoading(false);
            });

            return () => unsubscribe(); // Cleanup listener on unmount
        }
    }, [db, userId]);

    // 3. Admin Function: Add New Achievement
    const handleAddAchievement = async (e) => {
        e.preventDefault();
        if (!db || !title || !studentName || !description) return;

        setIsSubmitting(true);
        try {
            const achievementsRef = collection(db, `artifacts/${appId}/public/data/kda_achievements`);
            await addDoc(achievementsRef, {
                title,
                studentName,
                category,
                description,
                createdAt: serverTimestamp(),
                // This is the user who posted it (for administrative tracking)
                postedBy: userId 
            });

            // Clear form and close modal
            setTitle('');
            setStudentName('');
            setDescription('');
            setCategory('Academic');
            setShowModal(false);
        } catch (error) {
            console.error("Error adding achievement:", error);
        } finally {
            setIsSubmitting(false);
        }
    };

    // 4. Admin Function: Delete Achievement (Optional but good for management simulation)
    const handleDeleteAchievement = async (id) => {
        if (!db || !window.confirm('Are you sure you want to delete this achievement?')) return;
        
        try {
            const docRef = doc(db, `artifacts/${appId}/public/data/kda_achievements`, id);
            await deleteDoc(docRef);
        } catch (error) {
            console.error("Error deleting achievement:", error);
        }
    };

    // --- UI Components ---

    const AchievementCard = ({ achievement }) => (
        <div className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-teal-500 flex flex-col justify-between transform hover:scale-[1.02] transition duration-300">
            <div>
                <span className="text-xs font-bold uppercase tracking-wider text-teal-600 bg-teal-100 px-3 py-1 rounded-full mb-2 inline-block">
                    {achievement.category}
                </span>
                <h3 className="text-xl font-bold text-gray-900 mt-2">{achievement.title}</h3>
                <p className="text-sm font-medium text-gray-700 mb-4">
                    Achiever: <span className="text-teal-700">{achievement.studentName}</span>
                </p>
                <p className="text-gray-600 mb-4 line-clamp-3">{achievement.description}</p>
            </div>
            <div className="flex justify-between items-center pt-2 border-t border-gray-100">
                <span className="text-xs text-gray-500">
                    Posted: {formatTimestamp(achievement.timestamp)}
                </span>
                {/* Simple Admin Check: If the user ID matches the poster ID, or if we want to simulate full admin, allow delete. */}
                {(achievement.postedBy === userId || userId === 'admin-sim') && (
                    <button 
                        onClick={() => handleDeleteAchievement(achievement.id)} 
                        className="text-red-500 hover:text-red-700 text-sm font-medium transition duration-150"
                        aria-label={`Delete ${achievement.title}`}
                    >
                        Delete
                    </button>
                )}
            </div>
        </div>
    );

    const AchievementList = () => {
        if (isLoading) {
            return (
                <div className="text-center py-10 text-gray-500">
                    <svg className="animate-spin h-5 w-5 mr-3 inline-block" viewBox="0 0 24 24"></svg>
                    Loading achievements...
                </div>
            );
        }

        if (achievements.length === 0) {
            return <div className="text-center py-10 text-gray-600 border border-dashed border-gray-300 p-8 rounded-lg bg-white/50">No achievements posted yet! Be the first to celebrate KDA's success.</div>;
        }

        return (
            <div className="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
                {achievements.map(achievement => (
                    <AchievementCard key={achievement.id} achievement={achievement} />
                ))}
            </div>
        );
    };

    const AdminModal = () => {
        if (!showModal) return null;

        return (
            <div className="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50 p-4">
                <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg">
                    <div className="flex justify-between items-center p-6 border-b">
                        <h3 className="text-2xl font-bold text-gray-800">Add New Achievement</h3>
                        <button onClick={() => setShowModal(false)} className="text-gray-400 hover:text-gray-600 transition">
                            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                        </button>
                    </div>
                    <form onSubmit={handleAddAchievement} className="p-6 space-y-4">
                        <input
                            type="text"
                            placeholder="Achievement Title (e.g., State Math Olympiad Winner)"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            required
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 text-gray-800"
                        />
                        <input
                            type="text"
                            placeholder="Student Name"
                            value={studentName}
                            onChange={(e) => setStudentName(e.target.value)}
                            required
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 text-gray-800"
                        />
                        <select 
                            value={category}
                            onChange={(e) => setCategory(e.target.value)}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 text-gray-800"
                        >
                            {categories.map(cat => (
                                <option key={cat} value={cat}>{cat}</option>
                            ))}
                        </select>
                        <textarea
                            placeholder="Detailed description of the achievement, hard work, and impact..."
                            value={description}
                            onChange={(e) => setDescription(e.target.value)}
                            rows="4"
                            required
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 text-gray-800"
                        ></textarea>
                        
                        <div className="pt-2">
                            <button
                                type="submit"
                                disabled={isSubmitting}
                                className="w-full bg-teal-600 text-white font-bold py-3 rounded-lg hover:bg-teal-700 transition duration-300 disabled:bg-teal-400"
                            >
                                {isSubmitting ? 'Posting...' : 'Post Achievement'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        );
    };

    // --- Main Render ---
    return (
        <div className="min-h-screen bg-gray-50 text-gray-800">
            <header className="bg-white shadow-md sticky top-0 z-10">
                <div className="container mx-auto px-4 py-4 flex justify-between items-center">
                    <h1 className="text-3xl font-extrabold text-teal-600 tracking-tight">KDA Success Hub</h1>
                    <p className="text-sm text-gray-500 hidden sm:block">User ID: <span className="font-mono text-xs text-gray-700 bg-gray-100 p-1 rounded">{userId || 'Connecting...'}</span></p>
                </div>
            </header>

            <main className="container mx-auto px-4 py-12">
                <div className="flex justify-between items-center mb-10 border-b pb-4">
                    <h2 className="text-4xl font-bold text-gray-800">Student Achievements</h2>
                    <button 
                        onClick={() => setShowModal(true)} 
                        className="bg-teal-600 text-white font-semibold py-2 px-5 rounded-full shadow-lg hover:bg-teal-700 transition duration-300 flex items-center"
                    >
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4"></path></svg>
                        Add Achievement
                    </button>
                </div>

                <div className="mb-10 p-6 bg-teal-50 rounded-lg border-l-4 border-teal-500 text-teal-800">
                    <p className="font-medium">Welcome! This is KDA's central platform to celebrate and showcase student success stories across all categories (Academic, Sports, Arts, and more). **{achievements.length}** Achievements currently displayed.</p>
                </div>

                <AchievementList />
            </main>
            
            <AdminModal />
        </div>
    );
};

export default App;
